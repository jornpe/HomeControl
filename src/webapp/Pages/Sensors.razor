@page "/sensors"
@using webapp.Model;
@using Shared.Enums
@using webapp.Contracts
@using webapp.Extensions
@using webapp.Services;

@inject IApiService ApiService
@inject DialogService DialogService
@inject StateContainer StateContainer


<PageTitle>Sensors</PageTitle>

<h1>Sensors</h1>

<RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">

    <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    @bind-Value=@selectedSensors Multiple="true" Placeholder="Select..." Data=@StateContainer.AvailableSensors TextProperty="GetListItem" Class="w-100" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">From </RadzenText>
    <RadzenDatePicker @bind-Value=@startDate DateFormat="d" Change=@(date => selectedStartTime = (int)date.Value.ToUniversalTime().Subtract(new DateTime(1970, 1, 1)).TotalSeconds) Class="w-100" />

    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">To </RadzenText>
    <RadzenDatePicker @bind-Value=@endDate DateFormat="d" Change=@(date => selectedEndTime = (int)date.Value.ToUniversalTime().Subtract(new DateTime(1970, 1, 1)).TotalSeconds) Class="w-100" />
        
    <RadzenButton style="width: 330px" IsBusy="@isLoadingDeviceData" BusyText="Loading..." Click=@GetSensorDataAsync Text="Load" />

</RadzenCard>

<RadzenChart>

    @foreach (var sensor in StateContainer.SensorCollection)
    {
        if (sensor.Count > 0)
        {
            <RadzenLineSeries Smooth="true" Data="@sensor" CategoryProperty="Time" Title="@sensor[0].Type.ToString()" LineType="LineType.Dashed" ValueProperty="Value">
                <RadzenMarkers MarkerType="MarkerType.Square" />
                <RadzenSeriesDataLabels Visible="false" />
            </RadzenLineSeries>
        }
    }
    
    <RadzenCategoryAxis Padding="20" Formatter="@FormatXAxis" />

</RadzenChart>


<RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
    <RadzenButton style="width: 160px" Click=@GetSensorsAsync Text="Get sensors" />
</RadzenCard>

<RadzenDataGrid @ref="sensorsGrid" Data="@StateContainer.Sensors" TItem="SensorDto" AllowSorting="true" AllowPaging="true" AllowFiltering="true" PageSize="20">
    <Columns>

        <RadzenDataGridColumn Width="40" TItem="SensorDto" Title="#" Filterable="false" Sortable="true" TextAlign="TextAlign.Center">
            <Template Context="data">
                @(StateContainer.Sensors.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SensorDto" Property="SensorType" Title="Sensor Type" />

        <RadzenDataGridColumn TItem="SensorDto" Title="Value">
            <Template Context="data">
                @data.Value.ToString("N1") @data.SensorUnit
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SensorDto" Property="EpocTime" Title="Time">
            <Template Context="data">
                @DateTimeOffset.FromUnixTimeSeconds(data.EpocTime).ToLocalTime().DateTime.ToString("f")
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="SensorDto" Property="DeviceId" Title="Parent Device"/>

    </Columns>
</RadzenDataGrid>

@code
{
    DateTime? startDate = DateTime.Now.AddDays(-1);
    DateTime? endDate = DateTime.Now;
    int selectedStartTime = default;
    int selectedEndTime = default;
    bool isLoadingDeviceData;

    List<DeviceSensorList> selectedSensors = new();
    RadzenDataGrid<SensorDto>? sensorsGrid = new();

    protected override void OnInitialized() => StateContainer.OnChange += StateHasChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (StateContainer.Sensors.Count == 0)
        {
            await GetSensorsAsync();
        }
    }

    private async Task GetSensorDataAsync()
    {
        if (selectedSensors is null || selectedSensors.Count == 0)
        {
            Console.WriteLine("Selected sensors list is ether null or empty");
            return;
        }

        isLoadingDeviceData = true;
        StateContainer.SensorCollection.Clear();

        try
        {
            var dtos = selectedSensors
                        .GroupBy(s => s.DeviceId)
                        .Select(group => new SensorDataRequestDto
                            {
                                DeviceId = group.Key,
                                Sensors = group.Select(x => x.SensorType).ToArray(),
                                RangeStart = startDate.GetEpocTime(),
                                RangeEnd = endDate.GetEpocTime()
                            })
                        .ToList();

            foreach (var dto in dtos)
            {
                var result = await ApiService.GetSensorDataAsync(dto);

                StateContainer.SensorCollection.AddRange(
                    result
                        .GroupBy(x => x.Type)
                        .Select(g => g.ToList())
                        .ToList());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.StackTrace);
            throw;
        }
        finally
        {
            isLoadingDeviceData = false;
        }
    }

    private async Task GetSensorsAsync()
    {
        DialogService.Open("", ds =>
        @<div>
            <div class="row">
                <div class="col-md-12">
                    Loading sensors...
                </div>
            </div>
        </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });

        var result = await ApiService.GetSensorsAsync();
        StateContainer.Sensors = result.ToList();
        StateContainer.AvailableSensors = result
                            .Select(s => new DeviceSensorList { DeviceId = s.DeviceId, SensorType = s.SensorType })
                            .ToList();
        
        DialogService.Close();
    }

    string FormatXAxis(object value)
    {
        if (value is not null)
        {
            DateTime time = DateTimeOffset.FromUnixTimeSeconds(long.Parse(value.ToString()!)).ToLocalTime().DateTime;

            return (endDate.GetEpocTime() - startDate.GetEpocTime()) switch
            {
                <= 86400 =>                 time.ToString("t"),    // Less or equal 1 day
                > 86400 and <= 259200 =>    time.ToString("H"),    // 1 to 3 days
                > 259200 and <= 604800 =>   time.ToString("ddd"),  // 3 days to 1 week
                > 604800 and <= 2635200 =>  time.ToString("M"),    // 1 week to 1 month 
                _ =>                        time.ToString("MMM")   // Over 1 month
            };
        }

        return string.Empty;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
