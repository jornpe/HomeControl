@using webapp.Contracts;
@using webapp.Model;
@inject IApiService ApiService
@inject DialogService DialogService
@inject StateContainer StateContainer

<PageTitle>Devices</PageTitle>

<h1>Devices</h1>

<RadzenButton style="width: 160px" Click=@GetDevicesAsync Text="Refresh devices" />

<RadzenDataGrid @ref="devicesGrid" Data="@StateContainer.Devices" TItem="DeviceDto" AllowSorting="true" AllowPaging="true" PageSize="20">
    <Columns>

        <RadzenDataGridColumn Width="70" TItem="DeviceDto" Title="#" Filterable="false" Sortable="true" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenImage Path="images/device-icon.png" style="width: 40px; border-radius: 8px; margin-right: 8px;" />
                @(StateContainer.Devices?.IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="DeviceDto" Property="DeviceId" Title="Device Id" />

        <RadzenDataGridColumn TItem="DeviceDto" Property="State" Title="Connection state" />

        <RadzenDataGridColumn TItem="DeviceDto" Property="LastActivityTime" Title="Last activity" />

    </Columns>
</RadzenDataGrid>

@code
{
    RadzenDataGrid<DeviceDto>? devicesGrid = new();

    protected override void OnInitialized() => StateContainer.OnChange += StateHasChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (StateContainer.Devices.Count == 0)
        {
            await GetDevicesAsync();
        }
    }

    private async Task GetDevicesAsync()
    {
        DialogService.Open("", ds =>
        @<div>
            <div class="row">
                <div class="col-md-12">
                    Loading devices...
                </div>
            </div>
        </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });

        var result = await ApiService.GetDevicesAsync();
        StateContainer.Devices = result.ToList();
        DialogService.Close();
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
